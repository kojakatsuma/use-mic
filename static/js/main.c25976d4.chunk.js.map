{"version":3,"sources":["App.jsx","Mic.js","index.jsx"],"names":["mic","navigator","mediaDevices","getUserMedia","audio","video","then","stream","context","AudioContext","input","createMediaStreamSource","analyser","createAnalyser","processor","createScriptProcessor","connect","destination","spectrum","res","onaudioprocess","Uint8Array","frequencyBinCount","getByteFrequencyData","reduce","a","b","Math","max","this","close","sketch","p","setup","createCanvas","windowWidth","windowHeight","WEBGL","noStroke","draw","background","lights","rotateY","x","RADIUS","colorValue","getLevel","y","z","r","createBall","color","push","translate","fill","sphere","pop","ReactDOM","render","target","useRef","useEffect","p5","current","ref","document","getElementById"],"mappings":"kLAMMA,EAAM,I,WCHR,aAAe,IAAD,2BACVC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,EAAMC,OAAO,IAASC,MAAK,SAACC,GACrE,EAAKC,QAAU,IAAIC,aACnB,EAAKC,MAAQ,EAAKF,QAAQG,wBAAwBJ,GAClD,EAAKK,SAAW,EAAKJ,QAAQK,iBAC7B,EAAKC,UAAY,EAAKN,QAAQO,sBAAsB,KAAU,EAAG,GACjE,EAAKL,MAAMM,QAAQ,EAAKJ,UACxB,EAAKA,SAASI,QAAQ,EAAKF,WAC3B,EAAKA,UAAUE,QAAQ,EAAKR,QAAQS,aACpC,EAAKC,SAAW,GAChB,EAAKC,IAAM,EACX,EAAKL,UAAUM,eAAiB,WAC5B,EAAKF,SAAW,IAAIG,WAAW,EAAKT,SAASU,mBAC7C,EAAKV,SAASW,qBAAqB,EAAKL,UACxC,EAAKC,IAAM,EAAKD,SAASM,QAAO,SAACC,EAAGC,GAAJ,OAAUC,KAAKC,IAAIH,EAAGC,U,uDAM9D,OAAOG,KAAKV,KAAO,I,8BAInBU,KAAKrB,QAAQsB,Y,MDffC,EAAS,SAACC,GACZA,EAAEC,MAAQ,WACND,EAAEE,aAAaF,EAAEG,YAAaH,EAAEI,aAAcJ,EAAEK,OAChDL,EAAEM,YAGNN,EAAEO,KAAO,WACLP,EAAEQ,WAAW,KACbR,EAAES,SACFT,EAAEU,QAAQ,IACV,IAAK,IAAIC,GAAI,IAAaA,GAAKC,IAAYD,GAAKC,GAE5C,IADA,IAAMC,EAAa7C,EAAI8C,WACdC,GAAI,IAAaA,GAAKH,IAAYG,GAAKH,GAC5C,IAAK,IAAII,GAAI,IAAaA,GAAKJ,IAAYI,GAAKJ,GAAY,CACxD,IAAMK,EAAI,EAAqB,KAAjBjD,EAAI8C,WAClBI,EAAWP,EAAIM,EAAGF,EAAIE,EAAGD,EAAIC,EAAGJ,KAehD,IAAMK,EAAa,SAACP,EAAGI,EAAGC,EAAGG,GACzBnB,EAAEoB,OACFpB,EAAEqB,UAAUV,EAAGI,EAAGC,GAAGM,KAAKtB,EAAEmB,MAAMA,IAAQI,OAxCnC,IAyCPvB,EAAEwB,QExCVC,IAASC,OAAO,mBF6CD,WACX,IAAMC,EAASC,iBAAO,MAOtB,OANAC,qBAAU,WAEN,OADA,IAAIC,IAAG/B,EAAQ4B,EAAOI,SACf,WACH/D,EAAI8B,WAET,IAEC,yBAAKkC,IAAKL,MEtDF,MAAOM,SAASC,eAAe,U","file":"static/js/main.c25976d4.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport p5 from 'p5';\nimport Mic from './Mic';\n\nconst RADIUS = 30;\n\nconst mic = new Mic()\n\n/**\n * p5jsを使用してcanvasにアニメーションを描画する。\n * @param {p5} p\n */\nconst sketch = (p) => {\n    p.setup = () => {\n        p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL)\n        p.noStroke()\n    }\n\n    p.draw = () => {\n        p.background(150)\n        p.lights()\n        p.rotateY(45)\n        for (let x = -RADIUS * 4; x <= RADIUS * 4; x += RADIUS * 2) {\n            const colorValue = mic.getLevel()\n            for (let y = -RADIUS * 4; y <= RADIUS * 4; y += RADIUS * 2) {\n                for (let z = -RADIUS * 4; z <= RADIUS * 4; z += RADIUS * 2) {\n                    const r = 1 + mic.getLevel() * 0.005\n                    createBall(x * r, y * r, z * r, colorValue)\n                }\n\n            }\n        }\n\n    }\n    /**\n     * 球体を指定の座標に作成する。\n     *\n     * @param {number} x x座標\n     * @param {number} y y座標\n     * @param {number} z z座標\n     * @param {number} color 色\n     */\n    const createBall = (x, y, z, color) => {\n        p.push()\n        p.translate(x, y, z).fill(p.color(color)).sphere(RADIUS)\n        p.pop()\n    }\n\n}\n\nexport default () => {\n    const target = useRef(null)\n    useEffect(() => {\n        new p5(sketch, target.current)\n        return () => {\n            mic.close()\n        }\n    }, [])\n    return (\n        <div ref={target} />\n    )\n}\n","\n\nexport default class Mic {\n    constructor() {\n        navigator.mediaDevices.getUserMedia({ audio: true, video: false }).then((stream) => {\n            this.context = new AudioContext();\n            this.input = this.context.createMediaStreamSource(stream)\n            this.analyser = this.context.createAnalyser()\n            this.processor = this.context.createScriptProcessor(1024 * 2, 1, 1)\n            this.input.connect(this.analyser)\n            this.analyser.connect(this.processor)\n            this.processor.connect(this.context.destination)\n            this.spectrum = []\n            this.res = 0\n            this.processor.onaudioprocess = () => {\n                this.spectrum = new Uint8Array(this.analyser.frequencyBinCount)\n                this.analyser.getByteFrequencyData(this.spectrum)\n                this.res = this.spectrum.reduce((a, b) => Math.max(a, b))\n            }\n        })\n    }\n\n    getLevel() {\n        return this.res || 0\n    }\n\n    close() {\n        this.context.close()\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App/>,document.getElementById('root'))\n"],"sourceRoot":""}