{"version":3,"sources":["App.jsx","Mic.js","index.jsx"],"names":["mic","this","loaded","navigator","mediaDevices","getUserMedia","audio","video","then","stream","context","AudioContext","input","createMediaStreamSource","analyser","createAnalyser","connect","destination","result","Uint8Array","frequencyBinCount","getByteFrequencyData","reduce","a","b","Math","max","close","sketch","p","setup","createCanvas","windowWidth","windowHeight","WEBGL","noStroke","frameRate","draw","background","lights","rotateY","x","RADIUS","colorValue","getLevel","y","z","r","createBall","color","push","translate","fill","sphere","pop","ReactDOM","render","target","useRef","useEffect","p5","current","ref","document","getElementById"],"mappings":"kLAMMA,EAAM,I,WCHV,aAAe,IAAD,2BACZC,KAAKC,QAAS,EACdC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,EAAMC,OAAO,IAASC,MAAK,SAACC,GACvE,EAAKC,QAAU,IAAIC,aACnB,EAAKC,MAAQ,EAAKF,QAAQG,wBAAwBJ,GAClD,EAAKK,SAAW,EAAKJ,QAAQK,iBAC7B,EAAKH,MAAMI,QAAQ,EAAKF,UACxB,EAAKA,SAASE,QAAQ,EAAKN,QAAQO,aACnC,EAAKf,QAAS,K,uDAKhB,GAAID,KAAKC,OAAQ,CACf,IAAMgB,EAAS,IAAIC,WAAWlB,KAAKa,SAASM,mBAE5C,OADAnB,KAAKa,SAASO,qBAAqBH,GAC5BA,EAAOI,QAAO,SAACC,EAAGC,GAAJ,OAAUC,KAAKC,IAAIH,EAAGC,MAE7C,OAAO,I,8BAIPvB,KAAKS,QAAQiB,Y,MDbXC,EAAS,SAACC,GACZA,EAAEC,MAAQ,WACND,EAAEE,aAAaF,EAAEG,YAAaH,EAAEI,aAAcJ,EAAEK,OAChDL,EAAEM,WACFN,EAAEO,UAAU,KAGhBP,EAAEQ,KAAO,WACLR,EAAES,WAAW,KACbT,EAAEU,SACFV,EAAEW,QAAQ,IACV,IAAK,IAAIC,GAAI,IAAaA,GAAKC,IAAYD,GAAKC,GAE5C,IADA,IAAMC,EAAa3C,EAAI4C,WACdC,GAAI,IAAaA,GAAKH,IAAYG,GAAKH,GAC5C,IAAK,IAAII,GAAI,IAAaA,GAAKJ,IAAYI,GAAKJ,GAAY,CACxD,IAAMK,EAAI,EAAqB,KAAjB/C,EAAI4C,WAClBI,EAAWP,EAAIM,EAAGF,EAAIE,EAAGD,EAAIC,EAAGJ,KAehD,IAAMK,EAAa,SAACP,EAAGI,EAAGC,EAAGG,GACzBpB,EAAEqB,OACFrB,EAAEsB,UAAUV,EAAGI,EAAGC,GAAGM,KAAKvB,EAAEoB,MAAMA,IAAQI,OAzCnC,IA0CPxB,EAAEyB,QEzCVC,IAASC,OAAO,mBF8CD,WACX,IAAMC,EAASC,iBAAO,MAOtB,OANAC,qBAAU,WAEN,OADA,IAAIC,IAAGhC,EAAQ6B,EAAOI,SACf,WACH7D,EAAI2B,WAET,IAEC,yBAAKmC,IAAKL,MEvDF,MAAOM,SAASC,eAAe,U","file":"static/js/main.a4484173.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport p5 from 'p5';\nimport Mic from './Mic';\n\nconst RADIUS = 30;\n\nconst mic = new Mic()\n\n/**\n * p5jsを使用してcanvasにアニメーションを描画する。\n * @param {p5} p\n */\nconst sketch = (p) => {\n    p.setup = () => {\n        p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL)\n        p.noStroke()\n        p.frameRate(30)\n    }\n\n    p.draw = () => {\n        p.background(150)\n        p.lights()\n        p.rotateY(45)\n        for (let x = -RADIUS * 4; x <= RADIUS * 4; x += RADIUS * 2) {\n            const colorValue = mic.getLevel()\n            for (let y = -RADIUS * 4; y <= RADIUS * 4; y += RADIUS * 2) {\n                for (let z = -RADIUS * 4; z <= RADIUS * 4; z += RADIUS * 2) {\n                    const r = 1 + mic.getLevel() * 0.005\n                    createBall(x * r, y * r, z * r, colorValue)\n                }\n\n            }\n        }\n\n    }\n    /**\n     * 球体を指定の座標に作成する。\n     *\n     * @param {number} x x座標\n     * @param {number} y y座標\n     * @param {number} z z座標\n     * @param {number} color 色\n     */\n    const createBall = (x, y, z, color) => {\n        p.push()\n        p.translate(x, y, z).fill(p.color(color)).sphere(RADIUS)\n        p.pop()\n    }\n\n}\n\nexport default () => {\n    const target = useRef(null)\n    useEffect(() => {\n        new p5(sketch, target.current)\n        return () => {\n            mic.close()\n        }\n    }, [])\n    return (\n        <div ref={target} />\n    )\n}\n","\n\nexport default class Mic {\n  constructor() {\n    this.loaded = false;\n    navigator.mediaDevices.getUserMedia({ audio: true, video: false }).then((stream) => {\n      this.context = new AudioContext();\n      this.input = this.context.createMediaStreamSource(stream)\n      this.analyser = this.context.createAnalyser()\n      this.input.connect(this.analyser)\n      this.analyser.connect(this.context.destination)\n      this.loaded = true;\n    })\n  }\n\n  getLevel() {\n    if (this.loaded) {\n      const result = new Uint8Array(this.analyser.frequencyBinCount)\n      this.analyser.getByteFrequencyData(result)\n      return result.reduce((a, b) => Math.max(a, b))\n    }\n    return 0\n  }\n\n  close() {\n    this.context.close()\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App/>,document.getElementById('root'))\n"],"sourceRoot":""}