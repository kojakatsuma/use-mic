{"version":3,"sources":["Mic.js","App.jsx","index.jsx"],"names":["Mic","navigator","mediaDevices","getUserMedia","audio","video","then","stream","context","AudioContext","analayzer","createAnalyser","processor","createScriptProcessor","input","createMediaStreamSource","connect","destination","spectrum","res","onaudioprocess","Uint8Array","frequencyBinCount","getByteFrequencyData","reduce","a","b","Math","max","this","sketch","p","mic","setup","createCanvas","windowWidth","windowHeight","WEBGL","noStroke","draw","background","lights","rotateY","x","RADIUS","colorValue","getLevel","y","z","r","createBall","color","push","translate","fill","sphere","pop","ReactDOM","render","target","useRef","useEffect","p5","current","ref","document","getElementById"],"mappings":"kLAEqBA,E,WACjB,aAAe,IAAD,2BAEVC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,EAAMC,OAAO,IAASC,MAAK,SAACC,GACrE,EAAKC,QAAU,IAAIC,aACnB,EAAKC,UAAY,EAAKF,QAAQG,iBAC9B,EAAKC,UAAY,EAAKJ,QAAQK,sBAAsB,KAAU,EAAG,GACjE,EAAKC,MAAQ,EAAKN,QAAQO,wBAAwBR,GAClD,EAAKO,MAAME,QAAQ,EAAKN,WACxB,EAAKA,UAAUM,QAAQ,EAAKJ,WAC5B,EAAKA,UAAUI,QAAQ,EAAKR,QAAQS,aACpC,EAAKC,SAAW,GAChB,EAAKC,IAAM,EACX,EAAKP,UAAUQ,eAAiB,WAC5B,EAAKF,SAAW,IAAIG,WAAW,EAAKX,UAAUY,mBAC9C,EAAKZ,UAAUa,qBAAqB,EAAKL,UACzC,EAAKC,IAAM,EAAKD,SAASM,QAAO,SAACC,EAAGC,GAAJ,OAAUC,KAAKC,IAAIH,EAAGC,U,uDAM9D,OAAOG,KAAKV,Q,KCddW,EAAS,SAACC,GACZ,IAAMC,EAAM,IAAIhC,EAChB+B,EAAEE,MAAQ,WACNF,EAAEG,aAAaH,EAAEI,YAAaJ,EAAEK,aAAcL,EAAEM,OAChDN,EAAEO,YAGNP,EAAEQ,KAAO,WACLR,EAAES,WAAW,KACbT,EAAEU,SACFV,EAAEW,SAAS,IACX,IAAK,IAAIC,GAAI,IAAaA,GAAKC,IAAYD,GAAKC,GAE5C,IADA,IAAMC,EAAab,EAAIc,WACdC,GAAI,IAAaA,GAAKH,IAAYG,GAAKH,GAC5C,IAAK,IAAII,GAAI,IAAaA,GAAKJ,IAAYI,GAAKJ,GAAY,CACxD,IAAMK,EAAI,EAAsB,IAAjBjB,EAAIc,WACnBI,EAAWP,EAAIM,EAAGF,EAAIE,EAAGD,EAAIC,EAAGJ,KAQhD,IAAMK,EAAa,SAACP,EAAGI,EAAGC,EAAGG,GACzBpB,EAAEqB,OACFrB,EAAEsB,UAAUV,EAAGI,EAAGC,GAAGM,KAAKvB,EAAEoB,MAAMA,EAAOA,EAAOA,IAAQI,OAhCjD,IAiCPxB,EAAEyB,QChCVC,IAASC,OAAO,mBDqCD,WACX,IAAMC,EAASC,iBAAO,MAItB,OAHAC,qBAAU,WACN,IAAIC,IAAGhC,EAAQ6B,EAAOI,WACvB,IAEC,yBAAKC,IAAKL,MC3CF,MAAOM,SAASC,eAAe,U","file":"static/js/main.c066c3f1.chunk.js","sourcesContent":["\n\nexport default class Mic {\n    constructor() {\n        // navigator.permissions.query()\n        navigator.mediaDevices.getUserMedia({ audio: true, video: false }).then((stream) => {\n            this.context = new AudioContext();\n            this.analayzer = this.context.createAnalyser()\n            this.processor = this.context.createScriptProcessor(1024 * 2, 1, 1)\n            this.input = this.context.createMediaStreamSource(stream)\n            this.input.connect(this.analayzer)\n            this.analayzer.connect(this.processor)\n            this.processor.connect(this.context.destination)\n            this.spectrum = []\n            this.res = 0\n            this.processor.onaudioprocess = () => {\n                this.spectrum = new Uint8Array(this.analayzer.frequencyBinCount)\n                this.analayzer.getByteFrequencyData(this.spectrum)\n                this.res = this.spectrum.reduce((a, b) => Math.max(a, b))\n            }\n        })\n    }\n\n    getLevel() {\n        return this.res\n    }\n}\n","import React, { useRef, useEffect } from 'react';\nimport p5 from 'p5';\nimport Mic from './Mic';\n\nconst RADIUS = 30;\n\n/**\n *\n * @param {p5} p\n */\nconst sketch = (p) => {\n    const mic = new Mic()\n    p.setup = () => {\n        p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL)\n        p.noStroke()\n    }\n\n    p.draw = () => {\n        p.background(150)\n        p.lights()\n        p.rotateY(-0.3)\n        for (let x = -RADIUS * 4; x <= RADIUS * 4; x += RADIUS * 2) {\n            const colorValue = mic.getLevel()\n            for (let y = -RADIUS * 4; y <= RADIUS * 4; y += RADIUS * 2) {\n                for (let z = -RADIUS * 4; z <= RADIUS * 4; z += RADIUS * 2) {\n                    const r = 1 +  mic.getLevel() * 0.01\n                    createBall(x * r, y * r, z * r, colorValue)\n                }\n\n            }\n        }\n\n    }\n\n    const createBall = (x, y, z, color) => {\n        p.push()\n        p.translate(x, y, z).fill(p.color(color, color, color)).sphere(RADIUS)\n        p.pop()\n    }\n\n}\n\nexport default () => {\n    const target = useRef(null)\n    useEffect(() => {\n        new p5(sketch, target.current)\n    }, [])\n    return (\n        <div ref={target} />\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App/>,document.getElementById('root'))\n"],"sourceRoot":""}